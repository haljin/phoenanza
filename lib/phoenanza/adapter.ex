defmodule Phoenanza.EtsAdapter do
    @behaviour Ecto.Adapter
    @behaviour Ecto.Adapter.Migration
    @behaviour Ecto.Adapter.Storage

    use GenServer
    require Logger
# ------------------------------------------------------------------------------ API ------------------------------------------------------------------------------
    def start_link(options) do
        GenServer.start_link(__MODULE__, [options], name: __MODULE__)
    end

# --------------------------------------------------------------------- Ecto.Adapter callbacks --------------------------------------------------------------------
    defmacro __before_compile__ _ do
    end

    def child_spec(_, options) do
        import Supervisor.Spec
        worker(__MODULE__, [options])
    end

    
    def autogenerate(field_type) do
        Logger.info("autogenerate #{inspect(field_type)}")
        :not_implemented_autogenerated
    end

    # Returns the childspec that starts the adapter process
    def delete(repo, schema_meta, filters, options) do
        Logger.info("delete #{inspect(repo)}, #{inspect(schema_meta)}, #{inspect(filters)}, #{inspect(options)}")
        :not_implemented_delete
    end

    # Deletes a single struct with the given filters
    def dumpers(_primitive_type, ecto_type) do
        # Logger.info("dumpers #{inspect(primitive_type)}, #{inspect(ecto_type)}")
        [ecto_type]
    end

    # Returns the dumpers for a given type
    def ensure_all_started(repo, type) do
        Logger.info("ensure_all_started #{inspect(repo)}, #{inspect(type)}")
        {:ok, []}
    end

    # Ensure all applications necessary to run the adapter are started
    def execute(repo, query_meta, query, params, arg4, options) do
        Logger.info("execute #{inspect(repo)}, #{inspect(query_meta)}, #{inspect(query)}, #{inspect(params)}, #{inspect(arg4)}, #{inspect(options)}}")
        :not_implemented_execute
    end

    # Executes a previously prepared query  
    def insert(repo, schema_meta, fields, on_conflict, returning, options) do
        Logger.info("insert #{inspect(repo)}, #{inspect(schema_meta)}, #{inspect(fields)}, #{inspect(on_conflict)}, #{inspect(returning)}, #{inspect(options)}}")
        :not_implemented_insert
    end

    # Inserts a single new struct in the data store
    def insert_all(repo, schema_meta, header, list, on_conflict, returning, options) do
        Logger.info("insert_all #{inspect(repo)}, #{inspect(schema_meta)}, #{inspect(header)}, #{inspect(list)}, #{inspect(on_conflict)},  #{inspect(returning)}, #{inspect(options)}}")
        :not_implemented_insert_all
    end

    # Inserts multiple entries into the data store
    def loaders(primitive_type, ecto_type) do
        Logger.info("insert_all #{inspect(primitive_type)}, #{inspect(ecto_type)}")
    end

    def update(repo, schema_meta, fields, filters, returning, options) do
        Logger.info("update #{inspect(repo)}, #{inspect(schema_meta)}, #{inspect(fields)}, #{inspect(filters)},  #{inspect(returning)}, #{inspect(options)}}")
        :not_implemented_update
    end

    def prepare(_atom, query) do
        Logger.info("prepare #{inspect(_atom)}, #{inspect(query)}")
        {:nocache, query}
        # :not_implemented_prepare          
    end

# ----------------------------------------------------------------- Ecto.Adapter.Storage callbacks ----------------------------------------------------------------
    def storage_up(options) do
        :ok
        # case start_link(options) do
        #     {:ok, _} -> :ok
        #     {:error, {:already_started, _pid}} -> :ok
        #     _ -> :error
        # end
    end

    def storage_down(_options) do
        GenServer.stop(__MODULE__)
    end

# -------------------------------------------------------------------- Ecto.Migration callbacks -------------------------------------------------------------------
    def execute_ddl(_, _, _) do
        :ok
    end

    def supports_ddl_transaction?() do
        :false
    end

# ---------------------------------------------------------------------- GenServer callbacks ----------------------------------------------------------------------
    def init(options) do
        Logger.debug("starting adapter #{inspect(options)}")
        {:ok, []}
    end
    
    def handle_call(:storage_up, _, state) do
        {:reply, :i_am_here, state}
    end    
end